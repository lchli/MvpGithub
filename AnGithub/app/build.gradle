apply plugin: 'com.android.application'
apply from: '../buildSystem/dependencies.gradle'
apply from: '../buildSystem/globalValue.gradle'
apply plugin: 'android-apt'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.lchli.angithub"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

    }

    signingConfigs {
        release
        debug
    }

    File[] proguard = [new File('./', 'proguard-android.txt'), new File('./', 'proguard-rules.pro')]

    def debugType = {
        proguardFiles proguard
        minifyEnabled false
        zipAlignEnabled true
        //shrinkResources true
        signingConfig signingConfigs.debug
    }

    def releaseType={
        proguardFiles proguard
        minifyEnabled false
        zipAlignEnabled true
        //shrinkResources true
        signingConfig signingConfigs.release
    }

    buildTypes {


        Product {
            proguardFiles proguard
            minifyEnabled false
            zipAlignEnabled true
            //shrinkResources true
            signingConfig signingConfigs.release
        }

        Test {
            debugType
        }

        debug {
            debugType
        }
    }

    compileOptions {
        sourceCompatibility project.ext.javaVersion
        targetCompatibility project.ext.javaVersion
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.0'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    def testDependencies = project.ext.testDependencies
    def androidTestDependencies = project.ext.androidTestDependencies
    def domainDependencies = project.ext.domainDependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //test.
    androidTestCompile(androidTestDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile testDependencies.junit
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric
    //support.
    compile domainDependencies.appcompatv7
    compile domainDependencies.design
    compile domainDependencies.rxjava
    compile domainDependencies.rxandroid
    compile domainDependencies.retrofit
    compile domainDependencies."adapter-rxjava"
    compile domainDependencies."converter-gson"
    compile domainDependencies.gson
    apt domainDependencies.butterknifeApt
    compile domainDependencies.butterknife
    compile domainDependencies.logutils
    compile domainDependencies."support-v4"
    compile domainDependencies."commons-lang3"
    compile domainDependencies."commons-io"
    compile domainDependencies."pullRefresh"
    compile domainDependencies."eventbus"
    compile domainDependencies."glide"
    compile domainDependencies."react-native"


}

def Properties props = new Properties()
def propFile = new File(projectDir,'sigin.properties')


if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
}

if (props.containsKey('STORE_FILE')
        && props.containsKey('STORE_PASSWORD')
        && props.containsKey('KEY_ALIAS')
        && props.containsKey('KEY_PASSWORD')
        && props.containsKey('STORE_FILE_DEBUG')) {

    android.signingConfigs.release.storeFile = new File(projectDir,props['STORE_FILE'])
    android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

    android.signingConfigs.debug.storeFile = new File(projectDir,props['STORE_FILE_DEBUG'])
    android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
    android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
    android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']

    println 'sigin finish--------------------------------'


} else {
    println 'sigin.properties not found or incomplete'
    android.buildTypes.release.signingConfig = null
    android.buildTypes.debug.signingConfig = null
}
